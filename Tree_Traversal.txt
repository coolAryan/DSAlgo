public class TreeNode{   
        TreeNode left;
        TreeNode right;
        int data;
     TreeNode(int data)
     {
         this.left=null;
         this.right=null;
         this.data=data;
     }
     void preOrder(TreeNode root)
     {
         if(root==null)
         {
             return;
         }
         System.out.print(root.data+" ");
         preOrder(root.left);
          preOrder(root.right);
     }
      void postOrder(TreeNode root)
     {
         if(root==null)
         {
             return;
         }
        
         postOrder(root.left);
          postOrder(root.right);
           System.out.print(root.data+" ");
     }
     
      void inOrder(TreeNode root)
     {
         if(root==null)
         {
             return;
         }
        
         inOrder(root.left);
           System.out.print(root.data+" ");
          inOrder(root.right);
     }
   void levelorder(TreeNode root)
     {
         if(root==null)
         {
             return;
         }
         Queue<TreeNode>q=new LinkedList<>();
         q.add(root);
         while(!q.isEmpty())
         {
             TreeNode temp=q.peek();
             q.remove();
             System.out.print(temp.data+" ");
             if(temp.left!=null)
             {
                 q.add(temp.left);
             }
             if(temp.right!=null)
             {
                 q.add(temp.right);
             }
             
             
         }
     }
     void levelwiseorder(TreeNode root)
     {
         if(root==null)
         {
             return;
         }
         Queue<TreeNode>q=new LinkedList<>();
         q.add(root);
         q.add(null);
         while(!q.isEmpty())
         {
             TreeNode temp=q.peek();
             q.remove();
             if(temp==null)
             {
                 
                 if(!q.isEmpty())
                 {
                     System.out.println();
                     q.add(null);
                 }
             }
             else
             {
                 System.out.print(temp.data+" ");
                 if(temp.left!=null)
                 {
                    q.add(temp.left);   
                 }
                 if(temp.right!=null)
                 {
                     q.add(temp.right);
                 }
             }
         }
     }
    public static void main(String[] args) 
    {
        TreeNode root=new TreeNode(10);
         root.left=new TreeNode(20);
        root.right=new TreeNode(30);
        root.left.left=new TreeNode(40);
        root.left.right=new TreeNode(50);
        root.right.left=new TreeNode(60);
        root.right.right=new TreeNode(70);
        System.out.println("Inorder :(LNR)  ");
        root. inOrder(root);
         System.out.println("  Preorder :(NLR)  ");
        root. preOrder(root);
        System.out.println("   Postorder :(LRN)  ");
        root. postOrder(root);
        System.out.println();
        System.out.println("Level Order ");
        root.levelorder(root);
        System.out.println();
        System.out.println("Level wise Order ");
        root.levelwiseorder(root);
    }
    
    
}